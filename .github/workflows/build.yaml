#Workflow name
name: CI Pipeline
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main
      - action-with-arvos-cli

env:
  APP_PORT: 8080
  TEST_TAG: ayoubensalem/myapp:test

jobs:
  build:
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-20.04
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v3
      #Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      #Set up Maven cache
      - name: Cache Maven dependencies
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Package 
      - name: Package Application 
        run: mvn -U package

      -
        name: Install ARVOS
        run: pip install arvos

      - name: Run Vulnerability Tracer for 2 minutes
        run : arvos scan --detach --java 17 --jar target/java-app-0.0.1-SNAPSHOT.jar --pom pom.xml 

      # - name: Generate Workload - Heat UP Arthas
      #   run: |
      #     sleep 15
      #     ./workload-generator.sh 

      # - name: Generate Workload - Collect stack traces
      #   run: |
      #     sleep 5
      #     ./workload-generator.sh 

      - name: Generate Workload
        uses: nick-fields/retry@v2
        with:
          retry_wait_seconds: 10
          timeout_minutes: 1
          retry_on: any
          max_attempts: 3
          command: ./workload-generator.sh

      - name: Produce Report
        run: | 
          docker logs -f tracer
          exit $(docker inspect tracer --format "{{.State.ExitCode}}")